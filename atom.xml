<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序媛学习之路</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://andchen.com/"/>
  <updated>2018-07-12T04:17:01.284Z</updated>
  <id>https://andchen.com/</id>
  
  <author>
    <name>Feng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python</title>
    <link href="https://andchen.com/2018/07/12/Python-1/"/>
    <id>https://andchen.com/2018/07/12/Python-1/</id>
    <published>2018-07-12T04:17:01.000Z</published>
    <updated>2018-07-12T04:17:01.284Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Python" scheme="https://andchen.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python 爬虫--基本原理(1)</title>
    <link href="https://andchen.com/2018/07/12/Python/"/>
    <id>https://andchen.com/2018/07/12/Python/</id>
    <published>2018-07-12T04:14:52.000Z</published>
    <updated>2018-07-12T06:05:34.744Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，我是小白，来一起学习爬虫的基本原理。</p><p>这篇文章我来梳理一下爬虫的基本原理。用过 Python 的朋友都知道 Python 用来写爬虫是件很简单的事情。但是有的朋友不了解爬虫到底是什么，会想爬虫为什么设置请求头，请求体，到底要怎么去发送这个请求。当然也有的朋友使用过很多爬虫的库，解析库，写过很多爬虫案例，但是可能他们的思路脉络也不是太清晰。然而，你们的困惑我之前也有过。那么我就简单帮大家梳理一下爬虫原理。</p><h2 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫"></a>什么是爬虫</h2><p>爬虫即网络爬虫（Web Spider），又被称为网页蜘蛛，是一种按照一定的规则，自动地抓取网站信息的程序或者脚本。</p><p>就如，我们在浏览器输入网址，回车，得到我们需要的网络信息。这就是浏览器请求网站的服务器，获取到网络资源。爬虫也相当于模拟浏览器发送请求，获得到HTML代码。HTML代码里通常包含了标签和文字信息，我们就从中提取到我们想要的信息。</p><p>通常爬虫是从某个网站的某个页面开始，爬取这个页面的内容，找到网页中的其他链接地址，然后从这个地址爬到下一个页面，这样一直不停的爬下去，进去批量的抓取信息。那么，我们可以看出网络爬虫就是一个不停爬取网页抓取信息的程序。</p><h2 id="爬虫的基本流程"><a href="#爬虫的基本流程" class="headerlink" title="爬虫的基本流程"></a>爬虫的基本流程</h2><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><p>通过 HTTP 库向目标站点发送请求，即发送一个 Request,然后等待服务器响应。这个请求的过程相当于浏览客户端在浏览器地址栏输入网址：<a href="https://www.google.com，然后点击回车，向服务端发送一次请求。" target="_blank" rel="noopener">https://www.google.com，然后点击回车，向服务端发送一次请求。</a></p><h3 id="响应内容"><a href="#响应内容" class="headerlink" title="响应内容"></a>响应内容</h3><p>如果服务器能正常响应，我们会得到一个 Response，Response 的内容就是你所要获取的内容，这个过程就是服务器接收客户端的请求，类型可能有HTML、Json字符串，二进制数据等类型。进过解析发送给浏览器的网页HTML文件。</p><h3 id="解析内容"><a href="#解析内容" class="headerlink" title="解析内容"></a>解析内容</h3><p>如果得到的内容是 HTML，可以网页解析库进行解析，得到的是 Json，可以转为 Json 对象解析。得到二进制数据，可以做保存或者进一步处理。这些就像浏览器吧服务器端的文件获取到本地，再进行解析并展现出来。</p><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><p>保存的方式可以是把数据存为文本，也可以把数据保存到数据库等。</p><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h3 id="什么是-Request？"><a href="#什么是-Request？" class="headerlink" title="什么是 Request？"></a>什么是 Request？</h3><p>浏览器发送信息给该网址所在的服务器，这个过程就是做 HTTP Request。</p><h3 id="Request-中包含什么？"><a href="#Request-中包含什么？" class="headerlink" title="Request 中包含什么？"></a>Request 中包含什么？</h3><p>请求方式：请求方式的主要类型是GET，POST两种，另外还有HEAD、PUT、DELETE等。GET 请求的请求参数会显示在URL链接的后面，比如我们打开谷歌，搜索“图片”，我们会看到请求的URL链接为<a href="https://www.google.com/s?wd=图片。而" target="_blank" rel="noopener">https://www.google.com/s?wd=图片。而</a> POST 请求的请求参数会存放在Request内，并不会出现在 URL 链接的后面，比如我们登录QQ邮箱，输入用户名和密码，我们会看到浏览器开发者工具的Network页，Request请求有Form Data的键值对信息，那里就存放了我们的登录信息，有利于保护我们的账户信息安全。<br>请求 URL：URL 全称是统一资源定位符，也就是我们说的网址。比如一张图片，一个音乐文件，一个网页文档等都可以用唯一URL来确定，它包含的信息指出文件的位置以及浏览器应该怎么去处理它。<br>请求头(Request Headers)：请求头包含请求时的头部信息，如User-Agent（指定浏览器的请求头），authorization，Host，Cookies等信息。<br>请求体：请求体是请求是额外携带的数据，比如登录表单提交的登录信息数据。</p><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><h3 id="什么是-Response？"><a href="#什么是-Response？" class="headerlink" title="什么是 Response？"></a>什么是 Response？</h3><p>服务器收到浏览器发送的信息后，能够根据浏览器发送信息的内容，做出相应的处理，然后把信息回传给浏览器，这叫 HTTP Response。</p><h3 id="Response-中包含什么？"><a href="#Response-中包含什么？" class="headerlink" title="Response 中包含什么？"></a>Response 中包含什么？</h3><p>响应状态：有多种响应状态，如200代表成功，301跳转页面，404表示找不到页面，502表示服务器错误。<br>响应头(Response Headers)：比如内容类型，内容长度，服务器信息，设置 Cookie 等。<br>响应体：响应体主要的部分，包含了请求资源的内容，比如网页 HTML 代码，图片二进制数据等。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天梳理了爬虫的基本流程，Request，Response，有兴趣的可以学习一下，我写得不好，请帮我指出，谢谢！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大家好，我是小白，来一起学习爬虫的基本原理。&lt;/p&gt;
&lt;p&gt;这篇文章我来梳理一下爬虫的基本原理。用过 Python 的朋友都知道 Python 用来写爬虫是件很简单的事情。但是有的朋友不了解爬虫到底是什么，会想爬虫为什么设置请求头，请求体，到底要怎么去发送这个请求。当然也有
      
    
    </summary>
    
      <category term="Python" scheme="https://andchen.com/categories/Python/"/>
    
    
      <category term="Python" scheme="https://andchen.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 实例</title>
    <link href="https://andchen.com/2018/07/02/Python/"/>
    <id>https://andchen.com/2018/07/02/Python/</id>
    <published>2018-07-02T02:56:27.000Z</published>
    <updated>2018-07-02T02:58:47.354Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇了一个 python 试题，让我很经惊讶，我想，噫～～怎么看起来那么眼熟，这不是高中的数学题目？用 python 怎么实现呢？</p><p>看实例，如下：</p><p>题目：两个乒乓球进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x，z比，请编程序找出三队赛手的名单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(ord(<span class="string">'x'</span>), ord(<span class="string">'z'</span>) + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(ord(<span class="string">'x'</span>), ord(<span class="string">'z'</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i != j:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(ord(<span class="string">'x'</span>), ord(<span class="string">'z'</span>) + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> (i != k) <span class="keyword">and</span> (j != k):</span><br><span class="line">                    <span class="keyword">if</span> (i != ord(<span class="string">'x'</span>)) <span class="keyword">and</span> (k != ord(<span class="string">'x'</span>)) <span class="keyword">and</span> (k != ord(<span class="string">'z'</span>)):</span><br><span class="line">                        print(<span class="string">'order is a -- %s\t b -- %s\tc--%s'</span> % (chr(i), chr(j), chr(k)))</span><br></pre></td></tr></table></figure><p>我是小白，若上面的代码有错误的可以留言告诉我，我将不胜感激，谢谢！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天遇了一个 python 试题，让我很经惊讶，我想，噫～～怎么看起来那么眼熟，这不是高中的数学题目？用 python 怎么实现呢？&lt;/p&gt;
&lt;p&gt;看实例，如下：&lt;/p&gt;
&lt;p&gt;题目：两个乒乓球进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名
      
    
    </summary>
    
      <category term="Python" scheme="https://andchen.com/categories/Python/"/>
    
    
      <category term="Python" scheme="https://andchen.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 中的继承、属性读取方法和装饰器</title>
    <link href="https://andchen.com/2018/07/02/inherit/"/>
    <id>https://andchen.com/2018/07/02/inherit/</id>
    <published>2018-07-02T01:44:11.000Z</published>
    <updated>2018-07-02T03:04:03.682Z</updated>
    
    <content type="html"><![CDATA[<p>似乎很久没有写博文了，那就进入主题吧，今天通过这篇文章来学习 Python 继承、属性读取方法和装饰器。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>当一个类继承另一个类是，它将继承父类的所有功能(如变量和方法)。这有助于重用代码。</p><p>在下一个例子中我们首先创建一个叫做 Person 的类，然后创建两个派生类 Student 和 Teacher。当两个类都从 Person 类继承时，它们的类除了会有 Person 类的所有方法还会有自身用途的新方法和新变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        返回具有给定名称的Person对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_details</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        返回包含人名的字符串</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    返回Student对象，采用name, branch, year 3个参数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, branch, year)</span>:</span></span><br><span class="line">        Person.__init__(self, name)</span><br><span class="line">        self.branch = branch</span><br><span class="line">        self.year = year</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_details</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        返回包含学生具体信息的字符串</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;&#125; student &#123;&#125; and is in &#123;&#125; year."</span>.format(self.name, self.branch, self.year)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    返回Teacher 对象，采用字符串列表作为参数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, papers)</span>:</span></span><br><span class="line">        Person.__init__(self, name)</span><br><span class="line">        self.papers = papers</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_details</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;&#125; teacher &#123;&#125;"</span>.format(self.name, <span class="string">','</span>.join(self.papers))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person1 = Person(<span class="string">'Sachin'</span>)</span><br><span class="line">student1 = Student(<span class="string">'Kusha1'</span>, <span class="string">'CSE'</span>, <span class="number">2005</span>)</span><br><span class="line">teacher1 = Teacher(<span class="string">'Prasha1'</span>, [<span class="string">'c'</span>, <span class="string">'c++'</span>])</span><br><span class="line"></span><br><span class="line">print(person1.get_details())</span><br><span class="line">print(student1.get_details())</span><br><span class="line">print(teacher1.get_details())</span><br></pre></td></tr></table></figure><h3 id="属性读取方法"><a href="#属性读取方法" class="headerlink" title="属性读取方法"></a>属性读取方法</h3><p>在 Python 中请不要使用属性(attributes)读取方法(getters 和 setters)。如果之前接触过其他语言(如 Java)，你可能会在你的类里定义属性读取方法，请不要这样做，直接使用属性就可以了，看下面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name = name</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>std = Student(<span class="string">"Kushal Das"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(std.name)</span><br><span class="line">Kushal Das</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>std.name = <span class="string">"Python"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(std.name)</span><br><span class="line">Python</span><br></pre></td></tr></table></figure><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>如果你想要更精确的调整控制属性的权限，你可以使用 @property 装饰器，而@property 装饰器就是负责把一个方法变成属性调用的。看下面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, rate)</span>:</span></span><br><span class="line">        <span class="string">"""帐号类，amount 是美元金额"""</span></span><br><span class="line">        self.__amt = <span class="number">0</span></span><br><span class="line">        self.rate = rate</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">amount</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""账户余额(美元)"""</span></span><br><span class="line">        <span class="keyword">return</span> self.__amt</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cny</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""账户余额(人民币)"""</span></span><br><span class="line">        <span class="keyword">return</span> self.__amt * self.rate</span><br><span class="line"></span><br><span class="line"><span class="meta">    @amount.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">amount</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"sorry,no negative amount in the account."</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.__amt = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 汇率</span></span><br><span class="line">    acc = Account(rate=<span class="number">6.63</span>)</span><br><span class="line">    acc.amount = <span class="number">20</span></span><br><span class="line">    print(<span class="string">"Dollar amount:"</span>, acc.amount)</span><br><span class="line">    print(<span class="string">"In CNY:"</span>, acc.cny)</span><br><span class="line">    acc.amount = <span class="number">-200</span></span><br><span class="line">    print(<span class="string">"Dollar amount:"</span>, acc.amount)</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文章学习了 Python 继承、属性读取方法和装饰器，如果博友们看到有代码错误，请指出错处，我将不胜感激～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;似乎很久没有写博文了，那就进入主题吧，今天通过这篇文章来学习 Python 继承、属性读取方法和装饰器。&lt;/p&gt;
&lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;p&gt;当一个类继承另一个类
      
    
    </summary>
    
      <category term="Python" scheme="https://andchen.com/categories/Python/"/>
    
    
      <category term="Python" scheme="https://andchen.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>不同语言的妙处--冒泡</title>
    <link href="https://andchen.com/2018/05/28/different_languages/"/>
    <id>https://andchen.com/2018/05/28/different_languages/</id>
    <published>2018-05-28T13:04:17.000Z</published>
    <updated>2018-07-02T02:46:15.559Z</updated>
    
    <content type="html"><![CDATA[<p>最近，有位企业的老师给我们上课，课后布置了一个用 Java 实现冒泡排序的作业 ，然而，什么是冒泡排序呢？请看下面：</p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>冒泡排序 (Bubble sort) 是一种最简单的交换排序算法。我猜，大概是所有程序员都会用到的算法吧。 </p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><h3 id="第一轮排序"><a href="#第一轮排序" class="headerlink" title="第一轮排序"></a>第一轮排序</h3><p>比较两个相邻元素，如果第一个比第二个大，则交换两个元素的值。</p><p>进行下两个元素的比较，即比较第二个和第三个元素，如果前者大于后者，则交换。</p><p>再进行下两个元素的比较。直到较第 n-1 和第 n 元素进行比较，如果前者大于后者，则交换。</p><p>可以知道，最后一个元素 n ，肯定是 n 个元素中最大的元素。</p><h3 id="第二轮排序"><a href="#第二轮排序" class="headerlink" title="第二轮排序"></a>第二轮排序</h3><p>重复执行第一轮执行的动作，直到第 n-2 个元素和第 n-1 个元素进行比较。如前者大于后者，则交换。</p><p>由于第一轮排序已经将最大元素放置到第 n 个位置，所以本次排序无考虑第 n 个元素。即第 n 个元素不参加本次排序。</p><p>……</p><h3 id="重复执行"><a href="#重复执行" class="headerlink" title="重复执行"></a>重复执行</h3><p>直到只剩一个元素，那么这个元素一定是最小元素，排序结束。显然，进行了 n-1 次排序。</p><p>上述过程，每轮排序都会有一个元素从某个位置慢慢“浮动”到最终所属的位置,就像气泡总会浮动到水的最顶端。在冒泡排序中，每一轮排序都会有一个元素(气泡)替换到本次排序的最后一个位置(水的最顶端)，注意，是本次排序的最后一个位置(第一轮，则为 n；第二轮，则为 n-1；第三轮，则为 n-2 ~~~ )。</p><h2 id="Java-代码实现"><a href="#Java-代码实现" class="headerlink" title="Java 代码实现"></a>Java 代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Num</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">14</span>, <span class="number">4</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">25</span>, &#125;;</span><br><span class="line">Num.num(arr,arr.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : arr)</span><br><span class="line">&#123;</span><br><span class="line">System.out.print(i + <span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">num</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; l; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j - <span class="number">1</span>] &gt; a[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">t = a[j - <span class="number">1</span>];</span><br><span class="line">a[j - <span class="number">1</span>] = a[j];</span><br><span class="line">a[j] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Python-代码实现"><a href="#Python-代码实现" class="headerlink" title="Python 代码实现"></a>Python 代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble</span><span class="params">(li)</span>:</span></span><br><span class="line">    count = len(li)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</span><br><span class="line">            <span class="keyword">if</span> li[i] &gt; li[j]:</span><br><span class="line">                li[i], li[j] = li[j], li[i]</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    li = [<span class="number">10</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>]</span><br><span class="line">    bubble(li)</span><br><span class="line">    print(li)</span><br></pre></td></tr></table></figure><h2 id="kotlin-代码实现"><a href="#kotlin-代码实现" class="headerlink" title="kotlin 代码实现"></a>kotlin 代码实现</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">bubbleSort</span><span class="params">(array: <span class="type">IntArray</span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//非法检查</span></span><br><span class="line"><span class="keyword">if</span> (array.isEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> size = array.size</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until size - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1</span> until size-i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (array[j<span class="number">-1</span>]&gt;array[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">val</span> temp=array[j<span class="number">-1</span>]</span><br><span class="line">array[j<span class="number">-1</span>]=array[j]</span><br><span class="line">array[j]=temp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">val</span> sort= intArrayOf(<span class="number">1</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">7</span>)</span><br><span class="line">bubbleSort(sort)</span><br><span class="line">println(<span class="string">"数字从打到小排序得："</span>)</span><br><span class="line">sort.forEach &#123;</span><br><span class="line">print(<span class="string">"<span class="variable">$it</span>"</span>+<span class="string">"\t"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，把这篇文章送给每一位学习冒泡排序的程序员，希望可以帮助他们，也能学后写博文，进行把所学知识梳理成章。由于自己水平有限，或许文章可能会有纰漏，望各位批评指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近，有位企业的老师给我们上课，课后布置了一个用 Java 实现冒泡排序的作业 ，然而，什么是冒泡排序呢？请看下面：&lt;/p&gt;
&lt;h1 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h1
      
    
    </summary>
    
      <category term="Program" scheme="https://andchen.com/categories/Program/"/>
    
    
      <category term="Program" scheme="https://andchen.com/tags/Program/"/>
    
  </entry>
  
  <entry>
    <title>My_Life</title>
    <link href="https://andchen.com/2018/05/19/My_Life/"/>
    <id>https://andchen.com/2018/05/19/My_Life/</id>
    <published>2018-05-19T13:13:27.000Z</published>
    <updated>2018-05-19T15:26:09.711Z</updated>
    
    <content type="html"><![CDATA[<p>时间匆匆而过，刹那间，发现离考踏入英语四级的考场还有25天左右，平时淡定的我，忽然慌了起来。无论最后的结果如何，剩下的20多天都要埋头苦干，我相信 “ Where there is a will，there is a way. “</p><img src="/2018/05/19/My_Life/img.jpeg"><p>虽然这段时间可能很累，学的东西会很多，或者连打电话给家人的时间都没有，体重也往下降了，但是我相信有舍才有得。</p><p>我很感谢一个人，TA一直以来都在我身边陪着我，让我在学习中充满正能力，拥有无止境的动力。但我很惭愧有的时候我辜负他对我的期望，他却没有嫌弃我，在默默的支持我。今天是特别的一天，我想对你说辛苦了，520。</p><p>骚年，加油，趁着还年轻辛苦点也值得。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时间匆匆而过，刹那间，发现离考踏入英语四级的考场还有25天左右，平时淡定的我，忽然慌了起来。无论最后的结果如何，剩下的20多天都要埋头苦干，我相信 “ Where there is a will，there is a way. “&lt;/p&gt;
&lt;img src=&quot;/2018/0
      
    
    </summary>
    
      <category term="Life" scheme="https://andchen.com/categories/Life/"/>
    
    
      <category term="Life" scheme="https://andchen.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>model 的继承</title>
    <link href="https://andchen.com/2018/05/14/Inheritance/"/>
    <id>https://andchen.com/2018/05/14/Inheritance/</id>
    <published>2018-05-14T11:54:03.000Z</published>
    <updated>2018-05-14T13:05:35.026Z</updated>
    
    <content type="html"><![CDATA[<p>作为小白的我，没学过 Django 中的 model 继承，今天学习后，我非常激动。我发现 Django 中的 model 继承和 Python 的类继承十分相似，不过基类要是 django.db.models.Model。</p><p>Django 中有三种继承关系：</p><h4 id="Abstract-base-classes"><a href="#Abstract-base-classes" class="headerlink" title="Abstract base classes"></a>Abstract base classes</h4><img src="/2018/05/14/Inheritance/img1.jpg"><p>这是用父 model 来保存那些你不想在子 model 中重复录入的信息。父类是不使用的也就是不生成单独的数据表，这种情况下使用抽象基类继承 Abstract base classes。</p><h4 id="Multi-table-inheritance"><a href="#Multi-table-inheritance" class="headerlink" title="Multi-table inheritance"></a>Multi-table inheritance</h4><img src="/2018/05/14/Inheritance/img2.jpg"><p>这是从现有的Model继承并让每个Model都有自己的数据表，那么使用多重表继承。</p><h4 id="Proxy-models"><a href="#Proxy-models" class="headerlink" title="Proxy models"></a>Proxy models</h4><p>楼上采用多重表继承的方式需要为每个类创建一张数据据表，比较消耗资源。为了减少这种不必要的消耗，可以采用代理模型，可以对代理模型进行数据操作，而反应在原始模型上。</p><img src="/2018/05/14/Inheritance/img3.jpg"><p>如果你只想在 model 中修改 Python-level 级的行为，而不涉及字段改变。 代理 model 适用于这种场合。而 proxy model 必须继承一个非抽象 model，proxy model 还可以继承一个 proxy model 共享一个非抽象 model。如果没有为 proxy 指定一个 manager 那么其将继承父类的 manager，如果定义了一个 manager，那么这个 manager 称谓 proxy model 的默认 manager。同时父类的 manager 照样能够运行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为小白的我，没学过 Django 中的 model 继承，今天学习后，我非常激动。我发现 Django 中的 model 继承和 Python 的类继承十分相似，不过基类要是 django.db.models.Model。&lt;/p&gt;
&lt;p&gt;Django 中有三种继承关系：&lt;
      
    
    </summary>
    
      <category term="Django" scheme="https://andchen.com/categories/Django/"/>
    
    
      <category term="Django" scheme="https://andchen.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>对象和委托</title>
    <link href="https://andchen.com/2018/05/13/Object_Delegate/"/>
    <id>https://andchen.com/2018/05/13/Object_Delegate/</id>
    <published>2018-05-13T01:09:04.000Z</published>
    <updated>2018-05-13T03:54:29.679Z</updated>
    
    <content type="html"><![CDATA[<p>每当学习 Kotlin 的时候，我总想到 Java，它们之间的不同之处。</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象是 Kotlin 中的一个重要概念，可能很多读者会有疑问：什么是对象？对象是实例化类后的东西？为什么要提供对象呢？要回答这些问题，还要从 Java 说起。</p><p>在 Java 中，有一个匿名类的概念，也就是在创建类时，无须指定类的名字，匿名类一般用于方法的参数类型。基本概念是方法参数需要接收一个类或者接口的实例，而这个实例只是在该方法中临时用一下，并没有必要单独定义一个类，或单独创建一个对象变量。因此，就在传入方法参数值的同时创建了类的实例。看！下面的 Java 中匿名类的使用：</p><img src="/2018/05/13/Object_Delegate/img1.jpg"><p>在 Kotlin 中，也有类似的功能，但不是匿名类，而是对象。例如，下面的 Kotlin 代码完全实现了前面 Java代码的功能。要建立一个对象，需要使用 object 关键字，该对象要继承的类需要与 object 之间用冒号(:)分隔：如 MyClass(“Tom”)。</p><img src="/2018/05/13/Object_Delegate/img2.jpg"><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>委托其实是一种非常好的代码重用方式，有点类似 AOP (面向方面编程)，也就是将多个地方出现的代码放到同一个地方，以便被多个类属性重用。在学 kotlin 委托时，让我最深刻的就是委托属性和委托类的初始化函数。</p><h4 id="委托属性"><a href="#委托属性" class="headerlink" title="委托属性"></a>委托属性</h4><p>在实际应用中，很多类属性的 getter 和 setter 函数的代码相同或相似，当然，从技术上来说，在每个类中编写相同的代码是可行的，但这样就会造成代码的大量冗余，而且维护困难。为了解决这个问题，Kotlin 允许属性委托，也就是将属性的 getter 和 setter 函数代码放在一个我委托类中，如果在类中声明属性，只需要指定属性类。这样就可以大大减少代码的冗余也让代码更容易维护。</p><h4 id="委托类的初始化函数"><a href="#委托类的初始化函数" class="headerlink" title="委托类的初始化函数"></a>委托类的初始化函数</h4><p>在学习委托类的初始化函数的时候，让我最难理解的就是下面那句代码。</p><img src="/2018/05/13/Object_Delegate/image.png"><p>这句代码让我很困惑，特别是 Any 和 Any？，到底这两个有什么区别呢？然后我就去 Google，最后很开心，我找到了，也懂了。</p><p>原来，Kotlin 里的 Any，它相当于 Java 里的 Object，所有其他的类都默认继承了它。而Any 是非空类型层级结构的顶层，Any? 则是可空类型层级结构的顶层。因为 Any? 是 Any 的父类型，所以 Any? 是 Kotlin 类型层级结构的最顶端。例如： String 是 Any 的子类型，则 String? 是 Any? 的子类型。</p><p>而且，kotlin.Any是没有声明超类的类的默认超类。任何不是java.lang.Object，特别是它没有除equals（），hashCode（）和toString（）方法以外的任何成员。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>对象和委托是 Kotlin 中两个比较大的语法糖，对象相当于 Java 中的匿名对象，而委托的主要作用是实现代码重用，有点类似 AOP (面向方面编程)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每当学习 Kotlin 的时候，我总想到 Java，它们之间的不同之处。&lt;/p&gt;
&lt;h3 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h3&gt;&lt;p&gt;对象是 Kotlin 中的一个重要概念，可能很多读者
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://andchen.com/categories/Kotlin/"/>
    
    
      <category term="kotlin" scheme="https://andchen.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Data和Sealed</title>
    <link href="https://andchen.com/2018/05/09/Data_Sealed/"/>
    <id>https://andchen.com/2018/05/09/Data_Sealed/</id>
    <published>2018-05-09T05:56:02.000Z</published>
    <updated>2018-05-09T12:30:25.524Z</updated>
    
    <content type="html"><![CDATA[<p>与 Kotlin 相比，java 是一种冗长的语言。这种冗长的语言使得新程序员很容易理解Java代码。但 Java 代码却有不必要的过度膨胀。而接触过 Kotlin 的人，就会感觉它特简洁。</p><p>在写 Java 代码中，你曾有多少次是重复做同样的事：</p><img src="/2018/05/09/Data_Sealed/img1.jpg"><p>当我们编程的时候，如果有100这样的方法，看上去人也会晕，特别是出错的时候，找起来也很浪费时间。</p><p>与此相比，你看看 Kotlin,如下：</p><img src="/2018/05/09/Data_Sealed/img2.jpg"><p>看看，Kotlin 中的关键词 data 可以通过数据类根据主构造器的参数自动生成相关的代码。</p><h3 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h3><p>说起数据类，它有几个注意事项如下：</p><p>主构造器至少有一个参数;</p><p>主构造器的所有参数必须标记为val或var;</p><p>数据类不能是抽象类，open类，封闭（sealed）类的或内部(inner)类的。</p><p>由于数据类要求主构造器必须至少有一个参数，因此子数据中，不可以存在没有参数的主构造器，要想让数据类拥有一个没有参数的构造器。有两种方法如下：</p><p>为主构造器的每个参数都添加默认参数;</p><p>添加一个没有参数的次构造器，并调用主构造器时指定主构造器参数的默认值。</p><h3 id="封闭类"><a href="#封闭类" class="headerlink" title="封闭类"></a>封闭类</h3><p>封闭类也是 Kotlin 的一个语法糖。可以吧它理解为枚举的扩展。一个封装类，前面用 sealed 关键字标识。使用封装类的好处主要是when表达式不需要在使用else形式了。例子如下：</p><img src="/2018/05/09/Data_Sealed/img3.jpg"><p>注意：<br>密封类本身是抽象的，它不能被直接实例化，并且可以具有抽象成员。<br>密封类不允许有非私有构造函数（它们的构造函数默认是私有的）。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在 Kotlin 中提供了一些特殊类，其中数据类和封装类就是其中的两个。尽管这些类并不是必须的，但在很多时候使用它确实给我们带来很多好处，特别是数据类，当进行数据映射时将会变得得心应手。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;与 Kotlin 相比，java 是一种冗长的语言。这种冗长的语言使得新程序员很容易理解Java代码。但 Java 代码却有不必要的过度膨胀。而接触过 Kotlin 的人，就会感觉它特简洁。&lt;/p&gt;
&lt;p&gt;在写 Java 代码中，你曾有多少次是重复做同样的事：&lt;/p&gt;
&lt;i
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://andchen.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="https://andchen.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin-类和接口</title>
    <link href="https://andchen.com/2018/05/06/Class-Interface/"/>
    <id>https://andchen.com/2018/05/06/Class-Interface/</id>
    <published>2018-05-06T07:51:56.000Z</published>
    <updated>2018-06-17T01:54:20.232Z</updated>
    
    <content type="html"><![CDATA[<p>一个月前有一位大神，送了我一本 Kotlin 的书，当时的我，即兴奋又焦虑，原因就不说了，然而，由于各种繁忙，或者说拖延期，直到现在才开始学它，废话少说，直接转入正文。</p><p>这几天，我在学 Kotlin，首先把 Hello World 贴出吧</p><img src="/2018/05/06/Class-Interface/Hello.jpg"><p>Kotlin 和 Java 的类有点类似，就是语法糖不一样，但是实际对比一下实现同样功能的 Java 代码，差别还是很大的！</p><p>用 kotlin 类实现一个 Person 类属性的基本用法很简洁，而 Java 类实现Person却很长一串，这就是它们的区别，因此，很多程序员愿意用 Kotlin 开发APP。</p><img src="/2018/05/06/Class-Interface/J-Person.jpg"><img src="/2018/05/06/Class-Interface/Kt-Person.jpg"><p>要注意的是，Kotlin 分主构造器和第二构造器，主构造器的参数不仅可以用在 init 块中，还可以用于对属性的初始化。而第二构造器前面必须加 constructor 关键字，在类中声明了主构造器所有第二构造器都需要在声明后面调用主构造器。</p><p>特别重要的一点，注意：在主构造器参数中可以使用 var 和 val，但在第二构造器参数中不能使用 var 和 val，这就意味着，第二构造器的参数都是只读的，不能在构造器内部改变参数的值。而 Java 没有这些语法糖。</p><h2 id="修饰符-Modifiers"><a href="#修饰符-Modifiers" class="headerlink" title="修饰符(Modifiers)"></a>修饰符(Modifiers)</h2><p>在Kotlin 中，修饰符有4个：pivate protected internal 和 public。</p><p>pivate:仅仅在类的内部可以访问。</p><p>protected:类似pivate，但在子类中也可以访问。</p><p>internal:任何在模块内部类都可以访问。</p><p>public:任何类都可以访问。</p><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承(:)"></a>类的继承(:)</h2><p>与Java不同，Kotlin 类的继承需要使用冒号(:),而Java用的是extends。<br>注意，冒号后面需要调用父类的构造器。Kotlin和Java一样，都是单继承的，也就是说，一个Kotlin只能有一个父类。</p><img src="/2018/05/06/Class-Interface/jc.jpg"><p>要注意的是，Kotlin默认时class是final的，也就是说，默认时class不允许继承，需要显式地使用open关键词允许继承class。</p><h2 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口(Interface)"></a>接口(Interface)</h2><p>Kotlin 中的接口与Java 中的接口类似，使用interface关键词声明。一个类可以实现多个接口，实现的方法和类继承相同。而且，接口中的属性和方法都是open的。</p><img src="/2018/05/06/Class-Interface/Interface.jpg"><p>注意，在Java 中不允许有方法体，不过在Kotlin 中，允许接口的方法包含默认的方法体。</p><h2 id="抽象类-abstact"><a href="#抽象类-abstact" class="headerlink" title="抽象类(abstact)"></a>抽象类(abstact)</h2><p>抽象类和接口非常类似，Kotlin接口支持默认函数体，因此就更像了。学过Java的人都知道，抽象类不能被实类化，需要使用abstact关键字声明，Kotlin也如此。</p><p>注意，抽象方法不需要使用open声明，因此抽象类本身就是可继承的。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>如果从作用上来说，Kotlin 中的类和接口与Java的类和接口没什么本质上的差异，只不过Kotlin 为了体现差异，加了一些语法糖，如接口允许函数带有函数体，支持类属性，不支持静态方法等，这些语法糖的改进是否好不好，仍需要时间的验证，不过Kotlin提供这些功能，不妨我们去尝试用它，是否给我们的开发工作带来便利。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个月前有一位大神，送了我一本 Kotlin 的书，当时的我，即兴奋又焦虑，原因就不说了，然而，由于各种繁忙，或者说拖延期，直到现在才开始学它，废话少说，直接转入正文。&lt;/p&gt;
&lt;p&gt;这几天，我在学 Kotlin，首先把 Hello World 贴出吧&lt;/p&gt;
&lt;img s
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://andchen.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="https://andchen.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://andchen.com/2018/04/21/hello-world/"/>
    <id>https://andchen.com/2018/04/21/hello-world/</id>
    <published>2018-04-20T16:00:00.000Z</published>
    <updated>2018-04-21T07:00:32.673Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Hello" scheme="https://andchen.com/categories/Hello/"/>
    
    
  </entry>
  
</feed>
